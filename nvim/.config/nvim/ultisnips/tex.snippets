#============================================================================
# Functions
#============================================================================
#{{{
global !p
texMathZones = ['texMathRegion' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
texIgnoreMathZones = ['texMathTextArg']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'


def create_row_placeholders(snip):
    # retrieving single line from current string and treat it like tabstops
    # count
    placeholders_amount = int(snip.buffer[snip.line].strip())

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]

def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
#}}}

#============================================================================
# Parentheses
#============================================================================
#{{{
snippet "" "Guillemets" 
\`\`$1'' $0
endsnippet
snippet (  "Braces" iA
( $1) $0
endsnippet
snippet [  "Square Braces" A
[ $1] $0
endsnippet
snippet { "Curly brace" A
{ $1} $0
endsnippet
#}}}

#============================================================================
#Environments
#============================================================================
#{{{
snippet dm "display math" bA
\[ 
$1
\]
$0
endsnippet
snippet al "align" bA
\begin{align*}
$1
\end{align*}
$0
endsnippet

snippet env "enviromnent" bA
\begin{$1}
$2
\end{$1}
$0
endsnippet
snippet km "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet
snippet thm "Theorem" b
\begin{${1:thm}}[${2:Theorem name}]
	$0
\end{$1}
endsnippet
snippet defn "Definition" b
\begin{${1:defn}}[${2:Definition}]
	$0
\end{$1}
endsnippet
priority 1000
context "math()"
snippet pmm "vector" iA
\begin{pmatrix}
$1
\end{pmatrix}
$0
endsnippet
snippet beg "Surround in environment" i
\begin{$1}
${VISUAL}
\end{$1}
endsnippet
snippet lal "\begin{align*} / \end{align*}" A
\begin{align*}
${VISUAL}
\end{align*}
endsnippet
snippet eni "itemize environment"
\begin{itemize}
\item $1
\end{itemize}
$0
endsnippet
snippet enu "Enumerate environment"
\begin{enumerate}
\item $1
\end{enumerate}
$0
endsnippet
#}}}
#============================================================================
#Sections
#============================================================================
#{{{
snippet sc "section" b
\section{$1}
$0
endsnippet
snippet ssc "subsection" b
\subsection{$1}
$0
endsnippet
snippet sssc "subsubsection" b
\subsubsection{$1}
$0
endsnippet

#}}}

#============================================================================
# Creation
#============================================================================
#{{{
post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet
priority 1000
post_jump "create_matrix_placeholders(snip)"
snippet 'mat(\d+),(\d+)' "LaTeX array" r
\begin{pmatrix}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{pmatrix}
endsnippet
#}}}


#============================================================================
# Math symbols
#============================================================================
#{{{
# Simple
#{{{

snippet \- "setminus" i
\setminus
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet
context "math()"
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet
context "math()"
snippet __ "subscript with letters" iA
_{$1} $0
endsnippet
context "math()"
snippet itt "intertext" bA
\intertext{$1}
endsnippet
context "math()"
snippet sr "square" iA
^{2}
endsnippet
context "math()"
snippet invs "square" iA
^{-1}
endsnippet



context "math()"
snippet lim "limit" w
\lim_{${1:x} \to ${2: + \infty}} $0
endsnippet

priority 100
context "math()"
snippet sqq "squareroot" wA
\sqrt{$1} $0
endsnippet

priority 10
snippet sqq "squareroot" wA
\sqrt{${VISUAL}} $0
endsnippet

context "math()"
snippet uub "underbrace" 
\underbrace{${VISUAL}}_{$0}
endsnippet

context	"math()"
snippet tt "text"
\text{ $1 } $0
endsnippet

context "math()"
snippet crbr "curly braces" 
\left\\{ $1 \right\\} $0
endsnippet
context "math()"
snippet lrp "braces"
\left( $1 \right) $0
endsnippet

snippet tt "texttt"
\texttt{$1} $0
endsnippet

priority 10
snippet "bbb" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
snippet inti "inti" iA
\int_{-\infty}^{+\infty}$0
endsnippet

context "math()"
snippet int "int" i
\int_{ $1 }^{ $2 }$0
endsnippet
context "math()"
snippet Rn "R^n"
\mathbb{R}^n
endsnippet
context "math()"
snippet Rm "R^m"
\mathbb{R}^m
endsnippet

context "math()"
snippet sum "sum" 
\sum_{$1}^{ $2}$0
endsnippet

context "math()"
snippet ify "infty" A
\infty $0
endsnippet

context "math()"
snippet e "exp" 
e^{$1} $0
endsnippet

context "math()"
snippet pn "puissance" iA
^{ $1 } $0
endsnippet
context "math()"
snippet td "powers" iA
^{$1}$0
endsnippet
snippet rra "arrow" A
\Rightarrow $0
endsnippet
snippet 'del([a-zA-Z])' "del" wr
\del_`!p snip.rv = match.group(1)`$0
endsnippet
context "math()"
snippet 'e([a-z])' "basis vectors" wr
\vec{e}_`!p snip.rv = match.group(1)`$0
endsnippet
#}}}
# Regex
#{{{
priority 100
snippet "([a-zA-Z])bbb" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet
priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet
context "math()"
snippet "([a-zA-Z])ddt" "ddots" riA
\ddot{`!p snip.rv=match.group(1)`}
endsnippet
context "math()"
snippet "([a-zA-Z])dtt" "dots" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet
context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
snippet '(bb|cal|scr|frak)([a-zA-Z])' "mathfont" wr
\math`!p snip.rv = match.group(1)`{`!p snip.rv = match.group(2).upper()`}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet


context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`\\\
endsnippet
#}}}

# Fractions
#{{{
priority 1000
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
#}}}

# Logic

#{{{
snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet
priority 1000
snippet o\o "emptyset"
\emptyset
endsnippet
#}}}
#}}}
#============================================================================
# Text
#============================================================================
#{{{
snippet Tq "tel que"
Tel que
endsnippet
snippet tq "tel que"
tel que
endsnippet

snippet mq "montrer que"
montrer que
endsnippet
snippet Mq "montrer que"
Montrer que
endsnippet
snippet Spg "sans perte de generalite"
Sans perte de géneralité
endsnippet
snippet spg "sans perte de generalite"
sans perte de géneralité
endsnippet
snippet supp "supposons"
supposons
endsnippet
snippet Supp "supposons"
Supposons
endsnippet
snippet ssi "si et seulement si"
si et seulement si
endsnippet
snippet Ssi "si et seulement si"
Si et seulement si
endsnippet
#}}}
