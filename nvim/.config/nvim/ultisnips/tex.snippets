global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
def nonmath():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first == ignore
	except StopIteration:
		return True
endglobal


snippet al "align" bA
\begin{align*}
$1
\end{align*}
$0
endsnippet

snippet env "enviromnent" bA
\begin{$1}
$2
\end{$1}
$0
endsnippet

snippet tikz "tikzpicture" bA
\begin{tikzpicture}
$1
\end{tikzpicture}
$0
endsnippet
snippet '' "guillemets"
\`\`$1''`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2

endsnippet
snippet (  "Braces" A
($1)` !p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
snippet [  "Square Braces" A
[$1]`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
snippet { "Curly brace" A
{$1}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
snippet pdv "dérivée partielle" A
\pdv{$1}{$2} $0
endsnippet
snippet it "item in beamer" 
\item<$1->$0
endsnippet
context "nonmath()"
snippet km "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet
snippet setup "setup" b
\author{${1:David Wiedemann}}
\date{${2:`date +%F`}}
\title{$3}
\begin{document}
\maketitle
$0
\end{document}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet exe "Exercice" 
\begin{center}
\textbf{Exercice ${1:Numero}\\\
${2:Titre}}
\end{center}
\textit{${3:Enoncé}}
$0
endsnippet
snippet st "such that" w
such that $0
endsnippet


snippet sc "section" b
\section{$1}
$0
endsnippet
snippet ssc "section" b
\subsection{$1}
$0
endsnippet
snippet sssc "section" b
\subsubsection{$1}
$0
endsnippet
snippet mkt "maketitle" bA
\maketitle
$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet


snippet thm "Theorem" b
\begin{${1:thm}}[${2:Theorem name}]\label{$1:$3${2/\\\w+\{(.*?)\}|\\([^\\"])|(\w+)|([^\w]+)/(?4:_:\L$1$2$3\E)/ga}}
	$0
\end{$1}
endsnippet
snippet defn "Definition" b
\begin{${1:defn}}[${2:Definition}]\label{$1:$3${2/\\\w+\{(.*?)\}|\\([^\\"])|(\w+)|([^\w]+)/(?4:_:\L$1$2$3\E)/ga}}
	$0
\end{$1}
endsnippet


context "math()"
snippet inti "inti" iA
\int_{-\infty}^{+\infty}$0
endsnippet

context "math()"
snippet int "int" i
\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet sum "sum" 
\sum_{$1}^{$2}$0
endsnippet

context "math()"
snippet ify "infty" iA
\infty $0
endsnippet

context "math()"
snippet e "exp" 
e^{$1} $0
endsnippet

context "math()"
snippet itt "intertext" bA
\intertext{$1}
endsnippet

snippet dm "display math" bA
\[ 
$1
\]
$0
endsnippet
context "math()"
snippet pmmm "pmatrix" A
\begin{pmatrix}
$0
\end{pmatrix}
endsnippet
priority 1000
context "math()"
snippet pmm2 "vector" iA
\begin{pmatrix}
$1 \\\
$2
\end{pmatrix}
$0
endsnippet
priority 1000
context "math()"
snippet pmm3 "vector" iA
\begin{pmatrix}
$1 \\\
$2 \\\
$3
\end{pmatrix}
$0
endsnippet
priority 1000
context "math()"
snippet pmm4 "vector" iA
\begin{pmatrix}
$1 \\\
$2 \\\
$3 \\\
$4
\end{pmatrix}
$0
endsnippet

context "math()"
snippet pn "puissance" iA
^{ $1 } $0
endsnippet
snippet img "image" bA
\begin{center}
\includegraphics[width=0.5\textwidth]{$1}
\end{center}
$0
endsnippet
context "math()"
snippet td "powers" iA
^{$1}$0
endsnippet
context "math()"
snippet rra "arrow" A
\Rightarrow $0
endsnippet

context "nonmath()"
snippet rra "arrow" A
$\Rightarrow$ $0
endsnippet

context "math()"
snippet '(bb|cal|scr|frak)([a-zA-Z])' "mathfont" wr
\math`!p snip.rv = match.group(1)`{`!p snip.rv = match.group(2).upper()`}$0
endsnippet

context "math()"
snippet __ "subscript with letters" iA
_{$1} $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

priority 1000
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
snippet ev "Surround in environment" i
\begin{$1}
${VISUAL}
\end{$1}
endsnippet
snippet lal "\begin{align*} / \end{align*}" A
\begin{align*}
${VISUAL}
\end{align*}
endsnippet


priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`\\\
endsnippet
priority 10
snippet "bbb" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bbb" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
context "math()"
snippet sr "square" iA
^{2}
endsnippet


context "math()"
snippet tt "cdot" iA
\cdot
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:x} \to ${2: + \infty}} $0
endsnippet
context "math()"
snippet abs "absolute value" w
\abs{$1} $0
endsnippet
priority 100
context "math()"
snippet sqq "squareroot" wA
\sqrt{$1} $0
endsnippet
priority 10
snippet sqq "squareroot" wA
\sqrt{${VISUAL}} $0
endsnippet
